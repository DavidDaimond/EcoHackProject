import telebot
import config
import telebot.types as types
import csv
from mosecom_parser import output_information_one
#–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º
def findgeo(uid):
    with open('locations.csv', newline='') as base:
        data = csv.reader(base, delimiter = ';')
        geos = ''
        for row in data:
            if str(uid) in row[0]:
                geos += row[-1] + ': ' + row[1] + ' ' + row[2] + '\n'
    if geos == '':
        return '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ª–æ–∫–∞—Ü–∏–π'
    return geos

def findgeodata(uid, geoname):
    with open('locations.csv', newline='') as base:
        data = csv.reader(base, delimiter = ';')
        geos = []
        for row in data:
            if str(uid) in row[0] and str(geoname) in row[3]:
                geos += [row[1], row[2]] 
    if geos == []:
        return '–û—à–∏–±–∫–∞! –ù–µ—Ç —Ç–∞–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏!'
    return geos

def deviceadd(uid, name, did, dtype, lat, long):
    with open('devices.csv', 'a', newline='') as base:
        data = csv.writer(base, delimiter = ';', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        data.writerow([uid, did, dtype, name, lat, long])
        
        
def addgeo(uid, geoname, lat, long):
    with open('locations.csv', 'a', newline='') as base:
        data = csv.writer(base, delimiter = ';', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        data.writerow([uid, lat, long, geoname])

def finddevice(uid):
    with open('devices.csv', newline='') as base:
        data = csv.reader(base, delimiter = ';')
        devices = ''
        for row in data:
            if str(uid) in row[0]:
                devices += f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ \"{row[3]}\", –¢–∏–ø: {row[2]}, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {row[-2]} {row[-1]}\n\n'
    if devices == '':
        return '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤... \n\n–ù—É —Ç–∞–∫ –¥–æ–±–∞–≤—å—Ç–µ!'
    return devices

def printgeos(uid, message):
    with open('locations.csv', newline='') as base:
        data = csv.reader(base, delimiter = ';')
        for row in data:
            if row[3] == 'MSU':
                bot.send_message(message.from_user.id, 
                                 '–ü–æ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏ {0} –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: \n\n{1}'.format(row[3], 
                                                                                          output_information_one(float(row[1]), float(row[2]))))


def adduser(uid, username):
    with open('users.csv', 'a', newline='') as base:
        data = csv.writer(base, delimiter = ';', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        data.writerow([uid, username])
        
def geosmarkup(uid):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    with open('locations.csv', 'r') as base:
        data = csv.reader(base, delimiter = ';', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        for row in data:
            if row[0] == str(uid):
                markup.add(types.KeyboardButton(row[3]))
    markup.add(types.KeyboardButton('–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è', request_location=True))
    markup.add(types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    return markup

# def notificationsend():
#     with open('users.csv', 'a', newline='') as base:
#         udata = csv.reader(base, delimiter = ';')
#         for row in udata:
#             with open()


#–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –∫–Ω–æ–ø–æ–∫
   
bot = telebot.TeleBot(config.TOKEN)


mainmarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

tomainbutton = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')

mainGeo = types.KeyboardButton('üåç –õ–æ–∫–∞—Ü–∏–∏')
mainDevices = types.KeyboardButton('üñ≤ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
helpBut = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
notificBut = types.KeyboardButton('–û–ø–æ–≤–µ—â–µ–Ω–∏—è')
bestButtonEver = types.KeyboardButton('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è')


mainmarkup.add(mainGeo, mainDevices, helpBut)
mainmarkup.add(bestButtonEver)
geomarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

addGeo = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é')
# deleteGeo = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é')
geomarkup.add(addGeo, tomainbutton)

devicesmarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

addDevice = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
# delDevice = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
devicesmarkup.add(addDevice,tomainbutton)

notificationmarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

notificTime = types.KeyboardButton('–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π')
notificationmarkup.add(notificTime, tomainbutton)

settingsmarkup = types.InlineKeyboardMarkup(row_width=2)
item1 = types.InlineKeyboardButton("–£—Ö—É–¥—à–∏–ª—Å—è –≤–æ–∑–¥—É—Ö", callback_data='bad')
item2 = types.InlineKeyboardButton("–ò—Å–ø—Ä–∞–≤–∏–ª—Å—è –≤–æ–∑–¥—É—Ö", callback_data='good')
item3 = types.InlineKeyboardButton('–û—Ç–∫–ª—é—á–∏–ª–∏—Å—å —Å—Ç–∞–Ω—Ü–∏–∏ –ú–æ—Å–≠–∫–æ–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', callback_data='boot')

settingsmarkup.add(item1, item2, item3)

#–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
prev_message = ''
location_to_add = ''
prev_message = ''    
device_to_add = ''
device_type = ''
device_key = ''
device_location = ''

#–î–∞–ª–µ–µ –∏–¥–µ—Ç –ø—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–µ

@bot.message_handler(commands=['start', 'main'])
def welcome(message):
    global markup
    bot.send_message(message.chat.id, 
                     '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥—Ä—É–≥! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –ú–æ—Å–∫–≤–µ! \n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏',
                     reply_markup = mainmarkup)
    # with open('Moscow.jpg', 'rb') as photo:  
    #     bot.send_photo(message.chat.id, photo)
    adduser(message.from_user.id, message.from_user.username)

# @bot.message_nandler(commands=['pdk'])
# def notification(message):
#     if message.from_user.id == 158011962 or message.from_user.id == 649697634:
        
        
        
@bot.message_handler(content_types=['location'])
def addloc(message):
    global addGeomarkup
    global prev_message
    global location_to_add 
    global device_to_add
    global device_type 
    global device_key 
    global device_location 
    if prev_message == '–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é' and location_to_add:
        addgeo(message.from_user.id, location_to_add, message.location.latitude, message.location.longitude)
        bot.send_message(message.chat.id, '–í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
        prev_message = ''
        location_to_add = ''
    elif prev_message == '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' and device_type:
        deviceadd(message.from_user.id, 
                  device_to_add, 
                  device_key, 
                  device_type, 
                  message.location.latitude, 
                  message.location.longitude)
        bot.send_message(message.chat.id, '–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
        prev_message = ''
        location_to_add = ''
        prev_message = ''    
        device_to_add = ''
        device_type = ''
        device_key = ''
        device_location = ''
    geodata = {'lat': message.location.latitude, 'lon': message.location.longitude}
    #bot.reply_to(message, '–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π?')
    print(geodata, message.from_user.username)
    

@bot.message_handler(content_types=['text'])
def lalala(message):
    global prev_message
    global location_to_add 
    global device_to_add
    global device_type 
    global device_key 
    global device_location 
    #–ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if message.text == 'üåç –õ–æ–∫–∞—Ü–∏–∏':
        bot.send_message(message.chat.id, '–í —ç—Ç–æ–º –º–µ–Ω—é —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏. \n–¢–µ–∫—É—â–∏–µ –ª–æ–∫–∞—Ü–∏–∏: \n\n' + findgeo(message.from_user.id), 
                         reply_markup=geomarkup) 
    elif message.text == 'üñ≤ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞':
        bot.send_message(message.chat.id, '–≠—Ç–æ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. \n–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n\n'+finddevice(message.from_user.id), 
                         reply_markup=devicesmarkup)
    elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        bot.send_message(message.chat.id, '(—Å–µ–π—á–∞—Å –≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ –∏ –Ω–µ –æ—Ç–∫–ª—é—á–∏—Ç—å)\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞—Å —É–≤–µ–¥–æ–º–ª—è—Ç—å! \n\n–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á–∞ –Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å—Ç–∞–Ω—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–æ—Å–æ–≤ –≤—Ä–µ–¥–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤...\n\nC–æ–æ–±—â–∞—Ç—å –µ—Å–ª–∏ –≤ –º–æ–∏—Ö –º–µ—Å—Ç–∞—Ö: ', 
                         reply_markup=settingsmarkup)
    
    #–ù–∞ –≥–ª–∞–≤–Ω—É—é
    elif message.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é':
        bot.send_message(message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!', reply_markup=mainmarkup)
        location_to_add = ''
        device_to_add = ''
        device_type = ''
        device_key = ''
        device_location = ''
    #–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—Å—Ç—ã–ª—å
    elif message.text == '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è' :
        printgeos(message.from_user.id, message)
        with open('WINDOW.gif.mp4', 'rb') as doc:    
            bot.send_document(message.chat.id, doc)
        
    #–¶–µ–ø–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é':
        prev_message = message.text
        bot.send_message(message.chat.id, '–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –µ—ë?')
    elif prev_message == '–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é' and not location_to_add:
        bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, –∏–º—è –ª–æ–∫–∞—Ü–∏–∏: \"{message.text}\"\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è')
        location_to_add = message.text
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é –≤ –≤–∏–¥–µ –≥–µ–æ–º–µ—Ç–∫–∏')
    
    #–¶–µ–ø–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
        prev_message = '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
        bot.send_message(message.chat.id, 
                          f'–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç –∫—É—Å–∫–∞ –º—è—Å–∞ {message.from_user.username} –¥–∞–Ω–Ω—ã—Ö –æ –∏–º–µ–Ω–∏.\n\n–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?')
    elif prev_message == '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' and not device_to_add and message.text:
         bot.send_message(message.chat.id, 
                          f'–ü—Ä–∏–Ω—è—Ç–æ, –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: \"{message.text}\"')
         device_to_add = message.text
         bot.send_message(message.chat.id, 
                          '–ê —Ç–µ–ø–µ—Ä—å, –∫—É—Å–æ–∫ –º—è—Å–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ HERE device ID, –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π')
    elif prev_message == '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' and not device_key and message.text:
         device_key = message.text
         typemarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
         typemarkup.add(types.KeyboardButton('–î–∞—Ç—á–∏–∫'), types.KeyboardButton('–†–æ–±–æ—Ä—É–∫–∞'),
                        types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
         bot.send_message(message.chat.id, 
                          '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–ª–∞–≤–∏—à—É –Ω–∏–∂–µ', 
                          reply_markup = typemarkup)
    elif prev_message == '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' and not device_type and message.text:
         device_type = message.text
         bot.send_message(message.chat.id, '–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ –æ–¥–Ω–æ–π –∏–∑ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π',
                          reply_markup = geosmarkup(message.from_user.id))
    elif prev_message == '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' and device_type:
            if findgeodata(message.from_user.id, message.text) != '–û—à–∏–±–∫–∞! –ù–µ—Ç —Ç–∞–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏!':
                deviceadd(message.from_user.id, 
                          device_to_add, 
                          device_key, 
                          device_type,
                          findgeodata(message.from_user.id, message.text)[0],
                          findgeodata(message.from_user.id, message.text)[1])
                bot.send_message(message.chat.id, f'–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ \"{device_to_add}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup = mainmarkup)
                location_to_add = ''
                prev_message = ''    
                device_to_add = ''
                device_type = ''
                device_key = ''
                device_location = ''
            else:
                bot.send_message(message.chat.id, '–¢–∞–∫–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é', reply_markup = mainmarkup)
                location_to_add = ''
                prev_message = ''    
                device_to_add = ''
                device_type = ''
                device_key = ''
                device_location = ''
    #–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é... –Ø –ø–µ—Ä–µ–≤–µ–ª —Ç–µ–±—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.', reply_markup=mainmarkup)
        prev_message = ''
        location_to_add = ''
        prev_message = ''    
        device_to_add = ''
        device_type = ''
        device_key = ''
        device_location = ''
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ –≤ —Ç–≤–æ–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö –ø–æ—è–≤—è—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è, —è —Å–æ–æ–±—â—É!', reply_markup = mainmarkup)
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ –≤ —Ç–≤–æ–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö —Å–∏—Ç—É–∞—Ü–∏—è —É—Ö—É–¥—à–∏—Ç—Å—è, —è —Å–æ–æ–±—â—É!', reply_markup = mainmarkup)
            elif call.data == 'boot':
                bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ —Ä—è–¥–æ–º —Å —Ç–≤–æ–µ–π –ª–æ–∫–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π, —è —Å–æ–æ–±—â—É!', reply_markup = mainmarkup)
    except Exception as e:
        print(repr(e))
                                 

def botwork():
    try:
        bot.polling(none_stop=True)
    except Exception as ex:
        bot.send_message(649697634, f'Bot disabled his work with {ex}. Reboot....')
        botwork()
bot.polling(none_stop=True)